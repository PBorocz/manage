* Manage
  Inspired immensely by [[https://github.com/tfeldmann/organize/blob/main/manage.py][Thomas Feldman's manage.py]] script in his [[https://github.com/tfeldmann/organize][Organize]] project and the wonderful [[https://github.com/casey/just][Just command runner]], this package automates several common operations for poetry & org-based package management, particularly those that I don't perform regularly and/or require multiple steps to perform (and thus, tend to forget how to do them!)
** What is it?
   Single python script that "manages" everything over and above standard magit code commands. Primarily oriented around the myriad number of commands/steps necessary to perform a PyPI "release".
** Design:
   - The exact steps necessary to complete a /recipe/ are specified in a local recipe file (default ~./manage.yaml~) that is specific to your project (think of it as a set of recipes, one of which you desire to prepare where one recipe may use another).
   - A recipe file contains:
     - A set of /targets/ aka recipes (think of as Makefile commands or justfile targets).
     - Each target consists of a set of steps, each of which is shorthand description of what needs to be accomplished.
     - Each step can refer either to a built-in method (e.g. ~clean~) or to the name of another recipe.
     - Each step can have a user-confirmation before executing, e.g. "Are you sure? (~confirm~).
     - Each step can be configured as to whether or not it's stdout is displayed (~echo_stdout~).
     - Each step can be configured control whether errors encountered are fatal or not (~allow_error~).
   - An example ~manage.yaml~ might look like this:
#+begin_src yaml
  ################################################################################
  bump:
    description: Bump the version number to the next /patch/ level and commit locally
    steps:
      - method: poetry_bump_version
      - method: update_readme
      - method: git_commit_version_files

  ################################################################################
  clean:
    description: Clean out our temp files and ALL previous builds.
    steps:
      - method: clean

  ################################################################################
  build:
    description: Build our distribution(s).
    steps:
      - method: build
        confirm: false
        echo_stdout: true
        allow_error: true  # We don't care if no files are clean or if dirs don't exist.
#+end_src
** Fundamental Assumptions
To the degree that your development/release environment stray from mine, the tool probably becomes less and less relevant! However, these are my common python project standards, allowing for the ability of this tool to work seamlessly:
*** Tools
- [[https://python-poetry.org][Poetry]] is used to manage package dependencies *and* build environment.
- We assume that execution of this script is from the TOP level of a project, i.e. at the same level as pyproject.toml.
- The version string in pyproject.toml is the SINGLE and CANONICAL version string in our project/package. In particular, there are no ~/module/__version__.py~'s or versions embedded in ~__init__.py~~ files.
*** Versioning
- We use semantic versioning with ~poetry version~ to update/manage our version number. Specifically, this allows us to use ~poetry version~ command's keywords for version updates, ie. patch, minor, major etc.
*** README Management
- We manage our README in an Org format (see [[https://orgmode.org/][Emacs Org Mode]] for details).
- We assume ~README.org~ is kept in the top-level directory.
*** CHANGELOG Management
- We do *not* use a stand-alone ~CHANGELOG.md~ file.
- We use a specific section in ~README.org~ called /Release History/.
- We keep a list of completed but unreleased items in the /Release History/ under an "Unreleased" header. This allows us to easily update the version number associated with the set of changes to be released automatically.
*** Configuration
- We assume the following entries are available in our environment (either set in shell or through .env):
     |--------------------------------+-------------------------------------------+--------------------------------------------------------------------------|
     | ~GITHUB_USER~                    | Github user id                            | ~John-Jacob_JingleheimerSchmidt~                                           |
     | ~GITHUB_API_TOKEN~               | Github personal API token                 | ~ghp_1234567890ABCDEFG1234567890~                                          |
     | ~GITHUB_API_RELEASES~            | URL to Github release API                 | https://api.github.com/repos/<user>/<project>/releases                   |
     | ~GITHUB_PROJECT_RELEASE_HISTORY~ | URL to release history (for release body) | https://github.com/<user>/<project/blob/trunk/README.org#release-history |
     |--------------------------------+-------------------------------------------+--------------------------------------------------------------------------|

Note: technically, we might be able to infer ~GITHUB_PROJECT_RELEASE_HISTORY~ based on the ~GITHUB_USER~ and project name but we'd have to infer the "mainline" branch, some have moved ~master~ to ~main~ and others to ~trunk~.
** Installation
This isn't packaged for PyPI. However, distribution files are released to github.

If you use ~poetry~, this should suffice (and is how I use it from my projects). Specifically, we're installing the package's from it's github repository directly into our environment.
#+begin_src bash
poetry add git+https://github.com/PBorocz/manage --group dev
#+end_src

Create your ~manage.yaml~ file, here's a sample one to start from:
#+begin_src yaml
  clean:
    description: Clean out our temp files and ALL previous builds.
    steps:
      - method: clean
        echo_stdout: true

  build:
    description: Build our package.
    steps:
      - step: clean
      - method: build
        confirm: true
        echo_stdout: true
#+end_src

At this point, you should be able to run: ~manage check~ (one of the built-in targets) against ~manage.yaml~ you just created. Note that ~poetry add~ will create a ~manage~ command into your respective python /bin environment (hopefully, your virtual env).
** Development
- Confirm python version availability, I'm developing on 3.10.9 for now (and use [[https://github.com/pyenv/pyenv][pyenv]] to manage all my versions).
- Setup a .venv using your virtual-env manager of choice (I use ~python -m venv .venv~).
- Clone the repo.
- ~poetry install~ to install requisite dependencies into your venv.
- Set ~.envrc~ to point top-level directory (i.e. README and pyproject.toml), I use the wonderful [[https://direnv.net/][direnv]] package to take of this housekeeping. Here's why my ~.envrc~ contains, it not only sets the ~PYTHON_PATH~ appropriately but also takes care of automatically point me to my virtual-env:
#+begin_src bash
export PYTHONPATH=`pwd`
export VIRTUAL_ENV=$PYTHONPATH/.venv
PATH_add "$VIRTUAL_ENV/bin"
#+end_src
- At this point, you should be able to run: ~python manage check~ against the default ~manage.yaml~ in the root folder (yes, I do eat my own dog-food).
** GTD
- [TODO] Build a simple "~git_add~" target that simply does a `git add .`.
- [TODO] Build a "~run_local~" target that takes a local command to execute? (See ~optimus_ludos's~  manage.yaml for an example).
- [TODO] Confirm that a non-zero exit status (eg. from ~poetry_lock_check~) is handled correctly.
- [TODO] Can we add to the existing help option that lists the targets available from the relevant ~manage.yaml~ file?
- [TODO] Add all the commands currently implemented to this README for (my own) documentation.
- Perhaps use something like [[https://towardsdatascience.com/how-i-turned-my-companys-docs-into-a-searchable-database-with-openai-4f2d34bd8736][this]] to create our index repository for searching?
- [RESEARCH] Can we get the "help" to look like [[https://github.com/pycontribs/mk][this]]?
- [TODO] Replace hard-coded emoji's with key-names? (minor)
  [[https://unicode.org/emoji/charts/emoji-list.html]]
  #+begin_src python
    from rich.console import Console
    console = Console()
    console.print("Hello, [bold red]Rich[0/0] :snake:")
    # grid.add_row("Raising shields", "[bold magenta]COMPLETED [green]:heavy_check_mark:")
  #+end_src
- [TODO] Handle steps to support Sphinx documentation management:
  - Pull version from pyproject.toml and push to docs/source/conf.py (if it exists)
  - (don't think we need anything else as pushing to gh will automatically trigger a new RTD build)
- [TODO] Create a ~sample~ recipe to create an example ~manage.yaml~ in the current project directory. Essentially a copy of ~manage/examples/manage.yaml~ to ~$HOME_DIR~ (while checking to not overwrite any existing file)
- [TODO] Can we refactor steps/*.py to have/use a common-base class? Might significantly reduce duplicate code associated with confirmation and return statuses.
- [TODO] Would be nice on the "check" request to show statistics after the success() flags (and also on -v or -vv?)
- [TODO] Add a command-line parameter for verbosity (-v, -vv?)
  - -v:
    - print absolute paths associated with readme and pyproject.
    - print package name and version found, how many recipes encountered etc.
  - -vv:
    - add explicit output of command executed (sorta like ~echo_stdout~~ parameter does)
- [TODO] Can we refactor and dynamically create the ~GITHUB_PROJECT_RELEASE_HISTORY~ URL?
  We know the package name (from pyproject.toml)    -  90% confidence
  We know the user name (from another env variable  - 100% confidence
  We can somewhat surely assume the default branch? -  50% confidence.
- [IDEA] Replace requests and vcrpy with [[https://github.com/guilatrova/gracy][Gracy]]?
- [WORKING] Status of ongoing test development:
  |--------+-----------------------------------|
  | Status | Module                            |
  |--------+-----------------------------------|
  |     0% | ~build.py~                          |
  |     0% | ~git_commit_version_files.py~       |
  |     0% | ~git_create_release.py~             |
  |     0% | ~git_create_tag.py~                 |
  |     0% | ~git_push_to_github.py~             |
  |     0% | ~poetry_bump_version.py~            |
  |     0% | ~poetry_lock_check.py~              |
  |     0% | ~poetry_lock_refresh.py~            |
  |     0% | ~publish_to_pypi.py~                |
  |     0% | ~run_pre_commit.py~                 |
  |     0% | ~update_readme.py~                  |
  |   100% | ~clean.py~                          |
  |   100% | ~pandoc_convert_org_to_markdown.py~ |
  |--------+-----------------------------------|
** Release History
*** Unreleased
- ADDED: "print" as a new built-in target (essentially just validates and prints the relevant manage.yaml command file to your terminal).
- CHANGED: Missing either [tool.poetry].version or [tool.poetry].package is now allowed (for those projects that don't need formal package release/build management).
*** v0.1.3 - 2023-07-09
- ADDED: Two commands on behalf of poetry lock file management: ~poetry_lock_check~ and ~poetry_lock_refresh~ (meant to be used in that order) for good security practice.
*** v0.1.2 - 2023-02-18
- ADDED: Command-line argument to display package' version and quit.
*** v0.1.1 - 2023-02-16
*** v0.1.0 - 2023-02-16
- ADDED: Support for step-specific command-line overrides.
  For example, when "bumping" the version number of a package, while the recipe's step may default to *patch*,
  we can now specify *minor* (or any of the Poetry version labels) on the command-line instead, e.g. ~--poetry-version~.
- ADDED: Ability to override "confirm" recipe step attribute with command-line flag: ~--no-confirm~ or ~--confirm~.
*** v0.0.14 - 2023-02-06
- ADDED: Ability for ~update_readme~ to take an argument specifying what format the project's README file is in, ie. 'md' for markdown (default) or 'org'. Optional argument is ~readme_format~.
*** v0.0.13 - 2023-02-02
- ADDED: Ability to pass general "arguments" into steps that might require ~manage.yaml~ time configuration. Example is a step to convert from org to markdown, arguments are used to pass the specific input & output paths.
- CHANGED: Added ability for built-in "show" target to render nested recipes.
*** v0.0.12 - 2023-02-02
- ADDED: A step method that uses pandoc converter, for example to go from README.org to README.md.
- ADDED: The first draft of a better "show" target to document the current ~manage.yaml~ file.
- CHANGED Corrected data model: instead of ~method~ or ~step~ for a recipe, it's now ~method~ or /recipe/.
- CHANGED: Moved back to dynamically importing available step methods from manage.steps module.
*** v0.0.11 - 2023-01-29
- ADDED: A 'quiet-mode' step configuration option to remove all extraneous non-failure associated terminal output.
- ADDED: A command-line parameter to point to a specific manage recipe file (instead of default manage.toml)
- CHANGED: Back to YAML instead of TOML for recipe files (TOML nice for serialisation but too verbose for our use case).
- CHANGED: Default value for 'confirm' step option to True (as most of my steps are using True).
- CHANGED: To pydantic for stronger typing of Recipes and their associated steps.
- CHANGED: Sample recipe toml files to match pydantic-based data models (in particular, recipes are a dict!).
*** v0.0.10 - 2023-01-26
- ADDED: A "check" recipe/option to simply run the setup & validation steps only.
- ADDED: A validation that the version in ~pyproject.toml~ is consistent with the last release in the Release History of ~README.org~.
- CHANGED: Terminology from ~target~ to ~recipe~ and manage.toml to consisting of /recipes/.
- CHANGED: Steps to make them more "granular" and loaded from ~steps~ module.
- CHANGED: Over to TOML (tomli) instead of YAML for recipe files.
*** v0.0.9 - 2023-01-25
- CHANGED: To catch exception when manage.yaml can't be opened.
*** v0.0.8 - 2023-01-25
- ADDED: Missing /bin/manage script for execution after pip/poetry install.
*** v0.0.7 - 2023-01-25
- ADDED: Assumptions and example configurations to README.org.
*** v0.0.6 - 2023-01-25
*** v0.0.5 - 2023-01-25
*** v0.0.4 - 2023-01-25
*** v0.0.3 - 2023-01-25
*** v0.0.2 - 2023-01-25
- Initial packaging.


* Manage
  Inspired immensely by [[https://github.com/tfeldmann/organize/blob/main/manage.py][Thomas Feldman's manage.py]] script in his [[https://github.com/tfeldmann/organize][Organize]] project, this package automates several common operations for poetry & org-based package management, particularly those that I don't perform regularly and/or require multiple steps to perform (and thus, tend to forget how to do them!)
** Approach
   The exact steps necessary to complete a /recipe/ are specified in a local ~manage.yaml~ file that is specific to your project (think of it as a set of recipes, one of which you desire to prepare where one recipe may use another).
** Installation
   This isn't packaged for PyPI. Here's how I would approach using this if your interested:
   - confirm python version availability, I'm on 3.10.9 for now (and use ~pyenv~ to manage all my versions)
   - setup a .venv using your virtual-env manager of choice is (I use ~python -m venv .venv~)
   - clone the repo
   - ~poetry install~ to install requisite dependencies into your venv.
   - set .envrc to point top-level directory (i.e. README and pyproject.toml) (thus, I use ~direnv~)
   - ~python manage check~

   You'll note a manage.toml file in the top-level directory so yes, I do eat my own dog-food.

** Assumptions
*** Tools
    - [[https://python-poetry.org][Poetry]] is used manage our package dependencies *and* build environment.
    - We assume that execution of this script is from the TOP level of a project, i.e. at the same level as pyproject.toml.
    - The version string in pyproject.toml is the SINGLE and CANONICAL version string in our project/package.
*** Versioning
    - We use semantic versioning with ~poetry version~ to update/manage our version number.
*** README Management
    - We manage our README in an Org format (see [[https://orgmode.org/][Emacs Org Mode]] for details).
    - We assume ~README.org~ is kept in the top-level directory.
*** CHANGELOG Management
    - We do *not* use a stand-alone ~CHANGELOG.md~ file.
    - We use a specific section in ~README.org~ called /Release History/.
    - We keep a list of completed but unreleased items in the /Release History/ under an "Unreleased" header.
*** Configuration
    - We need *two* --group dev packages over and above our default environment to support this script tomli and requests.
    - We assume the following entries are available in our environment (either set in shell or through .env):
     |--------------------------------+-------------------------------------------+--------------------------------------------------------------------------|
     | GITHUB_USER                    | Github user id                            | JohnJacobJingleheimerSchmidt                                             |
     | GITHUB_API_TOKEN               | Github personal API token                 | ghp_1234567890ABCDEFG1234567890                                          |
     | GITHUB_API_RELEASES            | URL to Github release API                 | https://api.github.com/repos/<user>/<project>/releases                   |
     | GITHUB_PROJECT_RELEASE_HISTORY | URL to release history (for release body) | https://github.com/<user>/<project/blob/trunk/README.org#release-history |
     |--------------------------------+-------------------------------------------+--------------------------------------------------------------------------|
** GTD
   - Make it so that validation doesn't happen until AFTER we validate the command target,
     ie. read in just enough of the recipes to know what valid targets are and NO more!
   - Add a command-line parameter to take a specific poetry version "bump", ie /major/ and /minor/ over and above our current /patch/.
   - Add a command-line parameter to point to a specific manage recipe file (instead of default manage.toml)
   - Add a command-line parameter for verbosity (-v, -vv, -vvv?)
     - -v:
       - print absolute paths associated with readme and pyproject.
       - print package name and version found, how many recipes encountered etc.
     - -vv:
       - add explicit output of command executed (sorta like echo_stdout parameter does)
   - Add step tests:
     - 90% clean.py
     -  0% build.py
     -  0% git_commit_version_files.py
     -  0% git_create_release.py
     -  0% git_create_tag.py
     -  0% git_push_to_github.py
     -  0% poetry_bump_version_patch.py
     -  0% publish_to_pypi.py
     -  0% run_pre_commit.py
     -  0% update_readme.py
   - Add recipe read/validation tests.
** Release History
*** Unreleased
    - ADDED: A 'quiet-mode' step configuration option to remove all extraneous non-failure associated terminal output.
    - CHANGED: Default value for 'confirm' step option to True (as most of my steps are using True).
    - CHANGED: To pydantic for stronger typing of Recipes and their associated steps.
    - CHANGED: Sample recipe toml files to match pydantic-based data models, swap toml for tomli.
*** v0.0.10 - 2023-01-26
    - ADDED: A "check" recipe/option to simply run the setup & validation steps only.
    - ADDED: A validation that the version in ~pyproject.toml~ is consistent with the last release in the Release History of ~README.org~.
    - CHANGED: Terminology from ~target~ to ~recipe~ and manage.toml to consisting of /recipes/.
    - CHANGED: Steps to make them more "granular" and loaded from ~steps~ module.
    - CHANGED: Over to TOML (tomli) instead of YAML for recipe files.
*** v0.0.9 - 2023-01-25
    - CHANGED: To catch exception when manage.yaml can't be opened.
*** v0.0.8 - 2023-01-25
    - ADDED: Missing /bin/manage script for execution after pip/poetry install.
*** v0.0.7 - 2023-01-25
    - ADDED: Assumptions and example configurations to README.org.
*** v0.0.6 - 2023-01-25
*** v0.0.5 - 2023-01-25
*** v0.0.4 - 2023-01-25
*** v0.0.3 - 2023-01-25
*** v0.0.2 - 2023-01-25
    - Initial packaging.
